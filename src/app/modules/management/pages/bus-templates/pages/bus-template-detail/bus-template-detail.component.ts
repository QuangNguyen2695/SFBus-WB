import { Component, OnInit } from '@angular/core';
import { BusTemplatesService } from '../../service/bus-templates.servive';
import { Location } from '@angular/common'
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { BusSeatType } from '../../../bus-seat-types/model/bus-seat-type.model';
import { BusSeatTypesService } from '../../../bus-seat-types/service/bus-seat-types.servive';
import { toast } from 'ngx-sonner';

@Component({
  selector: 'app-bus-template-detail',
  templateUrl: './bus-template-detail.component.html',
  styleUrls: ['./bus-template-detail.component.scss'],
  standalone: false
})
export class BusTemplateDetailComponent implements OnInit {

  busTemplateDetailForm!: FormGroup;
  tabs = ['seat layout 1'];
  selectedIndex = 0;

  busSeatTypes: BusSeatType[] = [];
  currentBusSeatTypeId: string = '';

  rows: number = 11; // Number of rows in the matrix
  cols: number = 7; // Number of columns in the matrix
  matrixTempalte: {
    id: string;
    index: number;
    type: string;
    isEditing: boolean;
    isSelected: boolean;
    name: string;
    status: string;
    errorName: string;
    hasError: boolean;
    allowAutoNameEdit: boolean;
  }[][] = []; // Ma tr·∫≠n l∆∞u gi√° tr·ªã, ki·ªÉu, tr·∫°ng th√°i ch·ªânh s·ª≠a, tr·∫°ng th√°i ch·ªçn, t√™n


  holdTimeout: any;

  usedNames: Set<number> = new Set(); // Danh s√°ch l∆∞u tr·ªØ c√°c gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
  originalName: string = '';

  constructor(
    private fb: FormBuilder,
    private location: Location,
    private busTemplatesService: BusTemplatesService,
    private busSeatTypesService: BusSeatTypesService,
  ) { }

  ngOnInit(): void {
    this.initData();
    this.initForm();
  }

  initData() {
    this.busSeatTypesService.findAll().subscribe((busSeatTypes: BusSeatType[]) => {
      this.busSeatTypes = busSeatTypes;
      this.currentBusSeatTypeId = this.busSeatTypes ? this.busSeatTypes[0]._id : '';
      console.log("üöÄ ~ BusTemplateDetailComponent ~ this.busSeatTypesService.findAll ~ busSeatTypes:", busSeatTypes)
    })
  }

  private async initForm() {
    this.busTemplateDetailForm = this.fb.group({
      name: ['', [Validators.required]],
      layouts: this.fb.array([]),
    });
    this.addLayout();
  }

  // H√†m ƒë·ªÉ th√™m layout v√†o layouts FormArray
  async addLayout() {
    const layoutsForMatrixForm = this.busTemplateDetailForm.get('layouts') as FormArray;
    await this.initializeMatrix([], layoutsForMatrixForm, (layouts) => {
      console.log("üöÄ ~ BusTemplateDetailComponent ~ awaitthis.initializeMatrix ~ layoutsForMatrixForm:", layoutsForMatrixForm)
      layouts = layoutsForMatrixForm;
      console.log("üöÄ ~ BusTemplateDetailComponent ~ awaitthis.initializeMatrix ~ layouts:", layouts)
    });
  }

  async initializeMatrix(seatLayouts: any, layoutsForMatrixForm: any, out: (layoutsForMatrix: any) => void): Promise<void> {
    // if (seatLayouts && seatLayouts.length > 0) {
    //   for (const seatLayout of seatLayouts) {
    //     const layoutForMatrix = {
    //       name: seatLayout.controls.name.value,
    //       seatsLayoutForMatrix: Array.from({ length: this.rows }, (_, i) =>
    //         Array.from({ length: this.cols }, (_, j) => ({
    //           _id: "",
    //           index: i * this.cols + j + 1,
    //           type: "",
    //           name: "",
    //           status: "available",
    //           statusChanged: false,
    //           statusDeselected: false,
    //           isEditing: false,
    //           isSelected: false,
    //           errorName: '',
    //           hasError: false,
    //           allowAutoNameEdit: false,
    //         })),
    //       ),
    //     };
    //     if (seatLayout.seats) {
    //       for (const cell of seatLayout.seats) {
    //         const row = Math.floor((cell.index - 1) / this.cols);
    //         const col = (cell.index - 1) % this.cols;
    //         layoutForMatrix.seatsLayoutForMatrix[row][col] = {
    //           ...cell,
    //           statusChanged: false,
    //           statusDeselected: false,
    //         };
    //       }
    //     }

    //     layoutsForMatrixForm.push(layoutForMatrix);
    //     await out(layoutsForMatrixForm);
    //     return;
    //   }
    // }
    const layoutForMatrix = this.fb.group({
      name: ['Layout 1', [Validators.required]],
      seatsLayoutForMatrix: [Array.from({ length: this.rows }, (_, i) =>
        Array.from({ length: this.cols }, (_, j) => ({
          _id: '',
          index: i * this.cols + j + 1,
          busSeatTypeId: '',
          name: '',
          status: 'available',
          statusChanged: false,
          statusDeselected: false,
          isEditing: false,
          isSelected: false,
          errorName: '',
          hasError: false,
          allowAutoNameEdit: false,
        }))
      )],
    });

    layoutsForMatrixForm.push(layoutForMatrix);
    await out(layoutsForMatrixForm);
  }

  // Truy c·∫≠p layouts ƒë·ªÉ l√†m vi·ªác
  get layouts(): FormArray {
    return this.busTemplateDetailForm.get('layouts') as FormArray;
  }

  backPage() {
    this.location.back();
  }

  onSubmit() {

  }

  closeTab({ index }: { index: number }): void {
    this.tabs.splice(index, 1);
  }

  selectBusSeatType(busSeatType: string): void {
    this.currentBusSeatTypeId = busSeatType;
  }

  hasError(): boolean {
    const currentMatrix = this.layouts.controls[0].get('seatsLayoutForMatrix')?.value;
    return currentMatrix.some((row: any) => row.some((cell: any) => cell.hasError));
  }

  // √Åp d·ª•ng ki·ªÉu v√†o √¥ ƒë∆∞·ª£c ch·ªçn, kh√¥ng cho ph√©p b·ªè ch·ªçn khi ƒëang ch·ªânh s·ª≠a
  applyType(row: number, col: number): void {

    const currentMatrix = this.layouts.controls[0].get('seatsLayoutForMatrix')?.value;
    const cell = currentMatrix[row][col];
    const selectedType = this.busSeatTypes.find((busSeatType) => busSeatType._id === this.currentBusSeatTypeId);

    // Ki·ªÉm tra n·∫øu √¥ ƒëang ch·ªânh s·ª≠a ho·∫∑c c√≥ l·ªói th√¨ kh√¥ng l√†m g√¨
    if (cell.isEditing || this.hasError()) return;

    // N·∫øu √¥ ƒë√£ ƒë∆∞·ª£c ch·ªçn v√† lo·∫°i hi·ªán t·∫°i gi·ªëng v·ªõi lo·∫°i c·ªßa √¥, b·ªè ch·ªçn √¥
    if (cell.busSeatTypeId === this.currentBusSeatTypeId) {
      cell.isSelected = false;
      cell.busSeatTypeId = '';
      cell.name = '';
      cell.allowAutoNameEdit = false; // C·∫≠p nh·∫≠t allowAutoNameEdit

      this.usedNames.delete(parseInt(cell.name.slice(1))); // X√≥a t√™n kh·ªèi usedNames
    } else {
      this.updateCellType(cell, selectedType);
    }

    this.layouts.controls[0].get('seatsLayoutForMatrix')?.patchValue(currentMatrix);

    console.log("üöÄ ~ BusTemplateDetailComponent ~ applyType ~ this.layouts:", this.layouts)

    // // N·∫øu √¥ ƒëang l√† lo·∫°i 1 v√† lo·∫°i m·ªõi l√† 2 ho·∫∑c 3, x√≥a t√™n kh·ªèi usedNames
    // // if (cell.busSeatTypeId === 1 && [2, 3].includes(this.currentType)) {
    // //   this.usedNames.delete(parseInt(cell.name.slice(1)));
    // // }

    // // L∆∞u tr·∫°ng th√°i ch·ªânh s·ª≠a hi·ªán t·∫°i tr∆∞·ªõc khi √°p d·ª•ng lo·∫°i m·ªõi
    // currentMatrix.forEach((matrixRow: any, i: any) => matrixRow.forEach((cell: any, j: any) => cell.isEditing && this.saveEdit(i, j)));

    // // N·∫øu lo·∫°i hi·ªán t·∫°i h·ª£p l·ªá, √°p d·ª•ng lo·∫°i m·ªõi cho √¥
    // this.updateCellType(cell, selectedType);
  }

  updateCellType(cell: any, selectedType: any): void {
    cell.busSeatTypeId = this.currentBusSeatTypeId; // C·∫≠p nh·∫≠t lo·∫°i c·ªßa √¥
    cell.isSelected = true; // ƒê√°nh d·∫•u √¥ ƒë√£ ƒë∆∞·ª£c ch·ªçn

    // C·∫≠p nh·∫≠t allowAutoNameEdit theo lo·∫°i
    cell.allowAutoNameEdit = selectedType?.allowAutoNameEdit || false;

    // N·∫øu lo·∫°i l√† 2 ho·∫∑c 3, x√≥a t√™n c·ªßa √¥

    const idsIsEnv = this.busSeatTypes
      .filter(item => item.isEnv === true)
      .map(item => item._id);

    //N·∫øu type b·∫±ng env th√¨ x√≥a b·ªè t√™n
    if (idsIsEnv.includes(this.currentBusSeatTypeId)) {
      this.usedNames.delete(parseInt(cell.name.slice(1)));
      cell.name = '';

    } else if (selectedType?.allowAutoNameEdit) {
      const maxNames = this.rows * this.cols;
      for (let i = 1; i <= maxNames; i++) {
        if (!this.usedNames.has(i)) {
          cell.name = `A${i.toString().padStart(2, '0')}`; // T·∫°o t√™n m·ªõi cho √¥
          this.usedNames.add(i);
          break;
        }
      }
    }

    cell.icon = selectedType.icon; // C·∫≠p nh·∫≠t icon cho √¥
  }

  // H√†m focus v√†o √¥ ƒëang ch·ªânh s·ª≠a
  focusCell(): void {
    // console.log('üöÄ ~ OptionsValueComponent ~ focusCell ~ focusCell:');
    // setTimeout(() => {
    //   if (this.cellInput) {
    //     this.cellInput.nativeElement.focus();
    //   }
    // }, 0);
  }

  // B·∫Øt ƒë·∫ßu nh·∫•n chu·ªôt
  onMouseDown(row: number, col: number, event: MouseEvent): void {
    if (event.button !== 0) return; // Ch·ªâ th·ª±c hi·ªán n·∫øu nh·∫•n chu·ªôt tr√°i
    event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh
    this.holdTimeout = setTimeout(() => {
      // this.toggleStatus(row, col, event); // Thay ƒë·ªïi tr·∫°ng th√°i khi nh·∫•n gi·ªØ
      this.holdTimeout = null; // ƒê·∫∑t l·∫°i holdTimeout
    }, 1000); // Th·ªùi gian nh·∫•n gi·ªØ l√† 1000ms
  }

  // Nh·∫£ chu·ªôt
  onMouseUp(row: number, col: number, event: MouseEvent): void {
    if (event.button !== 0) return; // Ch·ªâ th·ª±c hi·ªán n·∫øu nh·∫£ chu·ªôt tr√°i
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout); // H·ªßy b·ªô ƒë·∫øm th·ªùi gian n·∫øu nh·∫•n gi·ªØ ch∆∞a x·∫£y ra
      this.applyType(row, col); // Th·ª±c hi·ªán h√†nh ƒë·ªông nh·∫•n
    }
    this.holdTimeout = null; // ƒê·∫∑t l·∫°i holdTimeout
  }

  // Di chu·ªôt ra kh·ªèi √¥
  onMouseLeave(event: MouseEvent): void {
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout); // H·ªßy b·ªô ƒë·∫øm th·ªùi gian n·∫øu nh·∫•n gi·ªØ ch∆∞a x·∫£y ra
      this.holdTimeout = null; // ƒê·∫∑t l·∫°i holdTimeout
    }
  }

  // Nh·∫•n chu·ªôt
  onClick(row: number, col: number, event: MouseEvent): void {
    if (event.button !== 0) return; // Ch·ªâ th·ª±c hi·ªán n·∫øu nh·∫•n chu·ªôt tr√°i
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout); // H·ªßy b·ªô ƒë·∫øm th·ªùi gian n·∫øu nh·∫•n gi·ªØ ch∆∞a x·∫£y ra
      this.holdTimeout = null; // ƒê·∫∑t l·∫°i holdTimeout
      this.applyType(row, col); // Th·ª±c hi·ªán h√†nh ƒë·ªông nh·∫•n
    }
  }

  getIconByType(busSeatTypeId: string, status: string = 'available'): string {
    const selectedType = this.busSeatTypes.find((busSeatType) => busSeatType._id === busSeatTypeId);
    if (!selectedType?.isEnv && status === 'block') {
      return selectedType?.blockIcon || '';
    }
    return selectedType?.icon || '';
  }

  // Ki·ªÉm tra xem √¥ c√≥ ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
  isEditing(row: number, col: number): boolean {
    const currentMatrix = this.layouts.controls[0].get('seatsLayoutForMatrix')?.value;
    return currentMatrix[row][col].isEditing;
  }

  // B·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a √¥ khi nh·∫•n chu·ªôt ph·∫£i
  startEdit(row: number, col: number, event: MouseEvent): void {
    // event.preventDefault(); // NgƒÉn ch·∫∑n menu chu·ªôt ph·∫£i m·∫∑c ƒë·ªãnh
    // const cell = this.matrix[row][col];
    // if (cell.busSeatTypeId > 0 && cell.busSeatTypeId !== 2 && cell.busSeatTypeId !== 3) {
    //   this.originalName = cell.name; // L∆∞u gi√° tr·ªã name hi·ªán t·∫°i
    //   cell.isEditing = true; // B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
    //   this.focusCell();
    // }
  }

  saveEdit(row: number, col: number): void {
    const currentMatrix = this.layouts.controls[0].get('seatsLayoutForMatrix')?.value;
    const cell = currentMatrix[row][col];
    const newName = cell.name;

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng t√™n (ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 'A' v√† theo sau l√† s·ªë t·ª´ 01 ƒë·∫øn 99)
    const nameFormat = /^A\d{2}$/;
    if (!nameFormat.test(newName)) {
      toast.error('T√™n kh√¥ng h·ª£p l·ªá. T√™n ph·∫£i c√≥ ƒë·ªãnh d·∫°ng A01, A02, ..., A99.');
      cell.hasError = true; // ƒê√°nh d·∫•u √¥ c√≥ l·ªói
      cell.isEditing = true; // Gi·ªØ √¥ ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
      this.focusCell(); // Focus v√†o √¥ l·ªói
      return;
    }

    // Ki·ªÉm tra n·∫øu t√™n m·ªõi ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng v√† kh√°c v·ªõi t√™n hi·ªán t·∫°i
    if (newName !== this.originalName && this.usedNames.has(parseInt(newName.slice(1)))) {
      toast.error('T√™n n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn t√™n kh√°c.');
      cell.hasError = true; // ƒê√°nh d·∫•u √¥ c√≥ l·ªói
      cell.isEditing = true; // Gi·ªØ √¥ ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
      this.focusCell(); // Focus v√†o √¥ l·ªói
      return;
    }

    // X√≥a t√™n c≈© kh·ªèi danh s√°ch ƒë√£ s·ª≠ d·ª•ng
    this.usedNames.delete(parseInt(this.originalName.slice(1)));

    // Th√™m t√™n m·ªõi v√†o danh s√°ch ƒë√£ s·ª≠ d·ª•ng
    this.usedNames.add(parseInt(newName.slice(1)));

    cell.hasError = false; // X√≥a ƒë√°nh d·∫•u l·ªói
    cell.isEditing = false; // K·∫øt th√∫c ch·∫ø ƒë·ªô ch·ªânh s·ª≠a

    this.layouts.controls[0].get('seatsLayoutForMatrix')?.patchValue(currentMatrix)
  }

  saveSelected(): void {
    // // √Ånh x·∫° d·ªØ li·ªáu t·ª´ c√°c √¥ ƒë∆∞·ª£c ch·ªçn trong ma tr·∫≠n 1 sang ma tr·∫≠n 2
    // const selectedCells = this.matrix.flat().filter((cell) => cell.isSelected);

    // selectedCells.forEach((cell) => {
    //   const row = Math.floor((cell.value - 1) / this.cols);
    //   const col = (cell.value - 1) % this.cols;

    //   // Ki·ªÉm tra v√† g√°n GUID n·∫øu ch∆∞a c√≥
    //   if (!cell.id) {
    //     cell.id = "1";
    //   }

    //   this.selectedMatrix[row][col] = {
    //     id: cell.id,
    //     value: cell.value,
    //     type: cell.busSeatTypeId,
    //     name: cell.name,
    //     status: cell.status,
    //   };
    // });

    // this.updateDisplayMatrix();
    // console.log('Selected Cells:', selectedCells);
    // toast.success('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
  }


  resetSelected() {
    // this.initializeMatrix();
    // this.usedNames.clear();
  }

}
